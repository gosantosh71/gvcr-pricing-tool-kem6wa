using System; // System package version 6.0.0
using System.Collections.Generic; // System.Collections.Generic package version 6.0.0
using System.Linq;
using System.Text.RegularExpressions;
using VatFilingPricingTool.Common.Constants;
using VatFilingPricingTool.Domain.Enums;
using VatFilingPricingTool.Domain.Exceptions;

namespace VatFilingPricingTool.Domain.Entities
{
    /// <summary>
    /// Represents a user in the VAT Filing Pricing Tool system with profile information and role-based permissions.
    /// </summary>
    public class User
    {
        /// <summary>
        /// Gets or sets the unique identifier for this user.
        /// </summary>
        public string UserId { get; private set; }

        /// <summary>
        /// Gets or sets the user's email address which also serves as the login identifier.
        /// </summary>
        public string Email { get; private set; }

        /// <summary>
        /// Gets or sets the user's first name.
        /// </summary>
        public string FirstName { get; private set; }

        /// <summary>
        /// Gets or sets the user's last name.
        /// </summary>
        public string LastName { get; private set; }

        /// <summary>
        /// Gets or sets the user's role which determines their permissions within the system.
        /// </summary>
        public UserRole Role { get; private set; }

        /// <summary>
        /// Gets or sets the date and time when the user account was created.
        /// </summary>
        public DateTime CreatedDate { get; private set; }

        /// <summary>
        /// Gets or sets the date and time of the user's last login.
        /// </summary>
        public DateTime LastLoginDate { get; private set; }

        /// <summary>
        /// Gets or sets a value indicating whether the user account is active.
        /// </summary>
        public bool IsActive { get; private set; }

        /// <summary>
        /// Gets or sets the Azure Active Directory object ID for users authenticated via Azure AD.
        /// </summary>
        public string AzureAdObjectId { get; private set; }

        /// <summary>
        /// Gets the collection of calculations performed by this user.
        /// </summary>
        public ICollection<Calculation> Calculations { get; private set; }

        /// <summary>
        /// Gets the collection of reports generated by this user.
        /// </summary>
        public ICollection<Report> Reports { get; private set; }

        /// <summary>
        /// Gets the collection of integrations configured by this user.
        /// </summary>
        public ICollection<Integration> Integrations { get; private set; }

        /// <summary>
        /// Default constructor for the User entity.
        /// </summary>
        protected User()
        {
            Calculations = new HashSet<Calculation>();
            Reports = new HashSet<Report>();
            Integrations = new HashSet<Integration>();
            CreatedDate = DateTime.UtcNow;
            LastLoginDate = DateTime.UtcNow;
            IsActive = true;
            Role = UserRole.Customer;
        }

        /// <summary>
        /// Factory method to create a new User instance.
        /// </summary>
        /// <param name="email">The user's email address.</param>
        /// <param name="firstName">The user's first name.</param>
        /// <param name="lastName">The user's last name.</param>
        /// <param name="role">The user's role in the system.</param>
        /// <returns>A new User instance.</returns>
        public static User Create(string email, string firstName, string lastName, UserRole role)
        {
            var user = new User
            {
                UserId = Guid.NewGuid().ToString(),
                Email = email?.ToLowerInvariant(),
                FirstName = firstName,
                LastName = lastName,
                Role = role,
                CreatedDate = DateTime.UtcNow,
                LastLoginDate = DateTime.UtcNow,
                IsActive = true
            };

            user.Validate();
            return user;
        }

        /// <summary>
        /// Factory method to create a new User instance with Azure AD integration.
        /// </summary>
        /// <param name="email">The user's email address.</param>
        /// <param name="firstName">The user's first name.</param>
        /// <param name="lastName">The user's last name.</param>
        /// <param name="role">The user's role in the system.</param>
        /// <param name="azureAdObjectId">The Azure AD Object ID for this user.</param>
        /// <returns>A new User instance with Azure AD integration.</returns>
        public static User CreateWithAzureAd(string email, string firstName, string lastName, UserRole role, string azureAdObjectId)
        {
            if (string.IsNullOrEmpty(azureAdObjectId))
            {
                throw new ValidationException("Azure AD Object ID cannot be null or empty", new List<string> { "Azure AD Object ID is required" });
            }

            var user = new User
            {
                UserId = Guid.NewGuid().ToString(),
                Email = email?.ToLowerInvariant(),
                FirstName = firstName,
                LastName = lastName,
                Role = role,
                AzureAdObjectId = azureAdObjectId,
                CreatedDate = DateTime.UtcNow,
                LastLoginDate = DateTime.UtcNow,
                IsActive = true
            };

            user.Validate();
            return user;
        }

        /// <summary>
        /// Updates the user's profile information.
        /// </summary>
        /// <param name="firstName">The user's updated first name.</param>
        /// <param name="lastName">The user's updated last name.</param>
        public void UpdateProfile(string firstName, string lastName)
        {
            if (string.IsNullOrEmpty(firstName))
            {
                throw new ValidationException("First name cannot be null or empty", new List<string> { "First name is required" });
            }

            if (string.IsNullOrEmpty(lastName))
            {
                throw new ValidationException("Last name cannot be null or empty", new List<string> { "Last name is required" });
            }

            FirstName = firstName;
            LastName = lastName;
        }

        /// <summary>
        /// Updates the user's email address.
        /// </summary>
        /// <param name="email">The user's updated email address.</param>
        public void UpdateEmail(string email)
        {
            if (string.IsNullOrEmpty(email))
            {
                throw new ValidationException("Email cannot be null or empty", new List<string> { "Email is required" });
            }

            if (!IsValidEmail(email))
            {
                throw new ValidationException("Invalid email format", new List<string> { "Email format is invalid" });
            }

            Email = email.ToLowerInvariant();
        }

        /// <summary>
        /// Updates the user's role.
        /// </summary>
        /// <param name="role">The user's updated role.</param>
        public void UpdateRole(UserRole role)
        {
            Role = role;
        }

        /// <summary>
        /// Updates the user's last login date to the current UTC time.
        /// </summary>
        public void UpdateLastLoginDate()
        {
            LastLoginDate = DateTime.UtcNow;
        }

        /// <summary>
        /// Activates the user account.
        /// </summary>
        public void Activate()
        {
            IsActive = true;
        }

        /// <summary>
        /// Deactivates the user account.
        /// </summary>
        public void Deactivate()
        {
            IsActive = false;
        }

        /// <summary>
        /// Checks if the user has the specified role.
        /// </summary>
        /// <param name="role">The role to check.</param>
        /// <returns>True if the user has the specified role, otherwise false.</returns>
        public bool HasRole(UserRole role)
        {
            return Role == role;
        }

        /// <summary>
        /// Checks if the user is an administrator.
        /// </summary>
        /// <returns>True if the user is an administrator, otherwise false.</returns>
        public bool IsAdministrator()
        {
            return Role == UserRole.Administrator;
        }

        /// <summary>
        /// Gets the user's full name (first name + last name).
        /// </summary>
        /// <returns>The user's full name.</returns>
        public string GetFullName()
        {
            return $"{FirstName} {LastName}";
        }

        /// <summary>
        /// Validates the user data.
        /// </summary>
        private void Validate()
        {
            var errors = new List<string>();

            if (string.IsNullOrEmpty(Email))
            {
                errors.Add("Email is required");
            }
            else if (!IsValidEmail(Email))
            {
                errors.Add("Email format is invalid");
            }

            if (string.IsNullOrEmpty(FirstName))
            {
                errors.Add("First name is required");
            }

            if (string.IsNullOrEmpty(LastName))
            {
                errors.Add("Last name is required");
            }

            if (errors.Any())
            {
                throw new ValidationException("User validation failed", errors, ErrorCodes.User.UserValidationFailed);
            }
        }

        /// <summary>
        /// Validates an email address format.
        /// </summary>
        /// <param name="email">The email address to validate.</param>
        /// <returns>True if the email format is valid, otherwise false.</returns>
        private bool IsValidEmail(string email)
        {
            if (string.IsNullOrEmpty(email))
                return false;

            // Basic email validation pattern
            string pattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
            return Regex.IsMatch(email, pattern);
        }
    }
}