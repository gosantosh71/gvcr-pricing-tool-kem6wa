{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "keyVaultName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Azure Key Vault"
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "Azure region where the Key Vault will be deployed"
            }
        },
        "sku": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "SKU for the Key Vault (Standard or Premium)"
            }
        },
        "accessPolicies": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of access policies for the Key Vault"
            }
        },
        "enabledForDeployment": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the Key Vault"
            }
        },
        "enabledForTemplateDeployment": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the Key Vault"
            }
        },
        "enabledForDiskEncryption": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys"
            }
        },
        "enableRbacAuthorization": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specifies whether Azure RBAC is used for authorization of data actions"
            }
        },
        "enableSoftDelete": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Specifies whether soft delete is enabled for the Key Vault"
            }
        },
        "softDeleteRetentionInDays": {
            "type": "int",
            "defaultValue": 90,
            "minValue": 7,
            "maxValue": 90,
            "metadata": {
                "description": "Specifies the number of days that items should be retained in the soft delete state"
            }
        },
        "networkAcls": {
            "type": "object",
            "defaultValue": {
                "defaultAction": "Allow",
                "bypass": "AzureServices",
                "ipRules": [],
                "virtualNetworkRules": []
            },
            "metadata": {
                "description": "Network access control lists for the Key Vault"
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Resource tags for the Key Vault"
            }
        }
    },
    "variables": {
        "keyVaultSkuName": "[parameters('sku')]",
        "keyVaultSkuFamily": "A"
    },
    "resources": [
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2021-10-01",
            "name": "[parameters('keyVaultName')]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                "accessPolicies": "[parameters('accessPolicies')]",
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "name": "[variables('keyVaultSkuName')]",
                    "family": "[variables('keyVaultSkuFamily')]"
                },
                "networkAcls": "[parameters('networkAcls')]",
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]"
            }
        }
    ],
    "outputs": {
        "keyVaultName": {
            "type": "string",
            "value": "[parameters('keyVaultName')]"
        },
        "keyVaultResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
        },
        "keyVaultUri": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))).vaultUri]"
        }
    }
}