# Azure DevOps build template for VAT Filing Pricing Tool
# Version: 1.0.0

parameters:
  # Required parameters
  - name: projectPath
    type: string
    displayName: 'Project or solution path'
    default: ''
  
  # Optional parameters
  - name: buildConfiguration
    type: string
    displayName: 'Build configuration'
    default: 'Release'
  - name: dotnetVersion
    type: string
    displayName: '.NET SDK version'
    default: '6.0.x'
  - name: runTests
    type: boolean
    displayName: 'Run unit tests'
    default: true
  - name: testProjects
    type: string
    displayName: 'Test projects glob pattern'
    default: '**/*.Tests.csproj'
  - name: publishArtifacts
    type: boolean
    displayName: 'Publish build artifacts'
    default: true
  - name: artifactName
    type: string
    displayName: 'Artifact name'
    default: 'drop'
  - name: runSonarAnalysis
    type: boolean
    displayName: 'Run SonarCloud analysis'
    default: false
  - name: sonarProjectKey
    type: string
    displayName: 'SonarCloud project key'
    default: 'VatFilingPricingTool'
  - name: sonarOrganization
    type: string
    displayName: 'SonarCloud organization'
    default: 'vatfilingpricingtool'
  - name: publishWebProject
    type: boolean
    displayName: 'Is web project'
    default: false
  - name: artifactPath
    type: string
    displayName: 'Artifact publish path'
    default: '$(Build.ArtifactStagingDirectory)'

steps:
  # Install required .NET SDK
  - task: UseDotNet@2
    displayName: 'Use .NET Core SDK ${{ parameters.dotnetVersion }}'
    inputs:
      version: ${{ parameters.dotnetVersion }}
      includePreviewVersions: false
    condition: succeeded()

  # Prepare SonarCloud analysis if enabled
  - task: SonarCloudPrepare@1
    displayName: 'Prepare SonarCloud Analysis'
    inputs:
      SonarCloud: 'SonarCloud'
      organization: '${{ parameters.sonarOrganization }}'
      scannerMode: 'MSBuild'
      projectKey: '${{ parameters.sonarProjectKey }}'
      projectName: 'VAT Filing Pricing Tool'
      extraProperties: |
        sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
        sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
        sonar.exclusions=**/obj/**,**/bin/**,**/wwwroot/lib/**
        sonar.coverage.exclusions=**/*.Tests.cs,**/Tests/**
        sonar.security.enabled=true
    condition: ${{ parameters.runSonarAnalysis }}

  # Restore NuGet packages
  - task: DotNetCoreCLI@2
    displayName: 'Restore NuGet packages'
    inputs:
      command: 'restore'
      projects: '${{ parameters.projectPath }}'
      feedsToUse: 'select'
      verbosityRestore: 'Normal'
    condition: succeeded()

  # Build the project
  - task: DotNetCoreCLI@2
    displayName: 'Build project'
    inputs:
      command: 'build'
      projects: '${{ parameters.projectPath }}'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --no-restore'
    condition: succeeded()

  # Run tests if enabled
  - task: DotNetCoreCLI@2
    displayName: 'Run tests with coverage'
    inputs:
      command: 'test'
      projects: '${{ parameters.testProjects }}'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --no-build --collect:"XPlat Code Coverage" --logger trx --results-directory $(Agent.TempDirectory) -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover'
      publishTestResults: true
    condition: ${{ parameters.runTests }}

  # Run SonarCloud analysis if enabled
  - task: SonarCloudAnalyze@1
    displayName: 'Run SonarCloud Analysis'
    condition: ${{ parameters.runSonarAnalysis }}

  # Publish SonarCloud results if analysis is enabled
  - task: SonarCloudPublish@1
    displayName: 'Publish SonarCloud Results'
    inputs:
      pollingTimeoutSec: '300'
    condition: ${{ parameters.runSonarAnalysis }}

  # Publish project artifacts if enabled
  - task: DotNetCoreCLI@2
    displayName: 'Publish project'
    inputs:
      command: 'publish'
      projects: '${{ parameters.projectPath }}'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --no-build --output ${{ parameters.artifactPath }}'
      publishWebProjects: ${{ parameters.publishWebProject }}
      zipAfterPublish: true
      modifyOutputPath: true
    condition: ${{ parameters.publishArtifacts }}

  # Publish build artifacts if enabled
  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifacts'
    inputs:
      PathtoPublish: '${{ parameters.artifactPath }}'
      ArtifactName: '${{ parameters.artifactName }}'
      publishLocation: 'Container'
    condition: ${{ parameters.publishArtifacts }}