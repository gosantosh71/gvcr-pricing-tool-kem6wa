# .github/workflows/infrastructure-deploy.yml
name: Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
        default: 'development'
      deploymentMethod:
        description: 'Deployment method to use'
        required: true
        type: choice
        options:
          - ARM
          - Terraform
        default: 'ARM'
      region:
        description: 'Primary Azure region'
        required: true
        type: choice
        options:
          - westeurope
          - northeurope
          - eastus
        default: 'westeurope'
      secondaryRegion:
        description: 'Secondary Azure region for disaster recovery'
        required: true
        type: choice
        options:
          - northeurope
          - westeurope
          - eastus2
        default: 'northeurope'
      deployKubernetes:
        description: 'Deploy Kubernetes resources'
        required: false
        type: boolean
        default: true
  push:
    branches:
      - main
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure-deploy.yml'
  schedule:
    - cron: '0 0 1 * *'

env:
  APP_NAME: 'vatfilingpricingtool'
  AZURE_CREDENTIALS: '${{ secrets.AZURE_CREDENTIALS }}'
  ARM_CLIENT_ID: '${{ secrets.ARM_CLIENT_ID }}'
  ARM_CLIENT_SECRET: '${{ secrets.ARM_CLIENT_SECRET }}'
  ARM_SUBSCRIPTION_ID: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
  ARM_TENANT_ID: '${{ secrets.ARM_TENANT_ID }}'
  TF_STATE_RESOURCE_GROUP_NAME: 'terraform-state-rg'
  TF_STATE_STORAGE_ACCOUNT_NAME: "tfstate${{ github.event.inputs.environment || 'development' }}sa"
  TF_STATE_CONTAINER_NAME: 'tfstate'
  TF_STATE_KEY: 'vatfilingpricingtool.tfstate'

jobs:
  validate_infrastructure:
    description: 'Validates infrastructure code before deployment'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository # actions/checkout v3
        uses: actions/checkout@v3
      - name: Set environment variables
        run: |
          echo "ENVIRONMENT=${GITHUB_EVENT_NAME == 'workflow_dispatch' && '${{ github.event.inputs.environment }}' || 'development'}" >> $GITHUB_ENV
          echo "DEPLOYMENT_METHOD=${GITHUB_EVENT_NAME == 'workflow_dispatch' && '${{ github.event.inputs.deploymentMethod }}' || 'ARM'}" >> $GITHUB_ENV
          echo "REGION=${GITHUB_EVENT_NAME == 'workflow_dispatch' && '${{ github.event.inputs.region }}' || 'westeurope'}" >> $GITHUB_ENV
          echo "SECONDARY_REGION=${GITHUB_EVENT_NAME == 'workflow_dispatch' && '${{ github.event.inputs.secondaryRegion }}' || 'northeurope'}" >> $GITHUB_ENV
      - name: Login to Azure # azure/login v1
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Validate ARM templates
        if: "${{ env.DEPLOYMENT_METHOD == 'ARM' }}"
        uses: azure/arm-deploy@v1 # azure/arm-deploy v1
        with:
          scope: 'subscription'
          subscriptionId: '${{ secrets.ARM_SUBSCRIPTION_ID }}'
          region: '${{ env.REGION }}'
          template: 'infrastructure/azure/arm-templates/main.json'
          parameters: 'infrastructure/azure/arm-templates/parameters.json environmentName=${{ env.ENVIRONMENT }} location=${{ env.REGION }} secondaryLocation=${{ env.SECONDARY_REGION }} appName=${{ env.APP_NAME }}'
          deploymentMode: 'Validate'
          failOnStdErr: 'true'
      - name: Setup Terraform
        if: "${{ env.DEPLOYMENT_METHOD == 'Terraform' }}"
        uses: hashicorp/setup-terraform@v2 # hashicorp/setup-terraform v2
        with:
          terraform_version: '1.3.0'
      - name: Initialize Terraform
        if: "${{ env.DEPLOYMENT_METHOD == 'Terraform' }}"
        run: |
          cd infrastructure/azure/terraform
          terraform init -backend-config="resource_group_name=${TF_STATE_RESOURCE_GROUP_NAME}" -backend-config="storage_account_name=${TF_STATE_STORAGE_ACCOUNT_NAME}" -backend-config="container_name=${TF_STATE_CONTAINER_NAME}" -backend-config="key=${TF_STATE_KEY}"
      - name: Validate Terraform
        if: "${{ env.DEPLOYMENT_METHOD == 'Terraform' }}"
        run: |
          cd infrastructure/azure/terraform
          terraform validate
      - name: Terraform Plan
        if: "${{ env.DEPLOYMENT_METHOD == 'Terraform' }}"
        run: |
          cd infrastructure/azure/terraform
          terraform plan -var-file="environments/${{ env.ENVIRONMENT }}/terraform.tfvars" -var="environment=${{ env.ENVIRONMENT }}" -var="location=${{ env.REGION }}" -var="secondary_location=${{ env.SECONDARY_REGION }}" -var="app_name=${{ env.APP_NAME }}" -out=tfplan
  deploy_infrastructure:
    description: 'Deploys infrastructure to Azure'
    runs-on: ubuntu-latest
    needs:
      - validate_infrastructure
    environment: "${{ github.event.inputs.environment || 'development' }}"
    steps:
      - name: Checkout repository # actions/checkout v3
        uses: actions/checkout@v3
      - name: Set environment variables
        run: |
          echo "ENVIRONMENT=${GITHUB_EVENT_NAME == 'workflow_dispatch' && '${{ github.event.inputs.environment }}' || 'development'}" >> $GITHUB_ENV
          echo "DEPLOYMENT_METHOD=${GITHUB_EVENT_NAME == 'workflow_dispatch' && '${{ github.event.inputs.deploymentMethod }}' || 'ARM'}" >> $GITHUB_ENV
          echo "REGION=${GITHUB_EVENT_NAME == 'workflow_dispatch' && '${{ github.event.inputs.region }}' || 'westeurope'}" >> $GITHUB_ENV
          echo "SECONDARY_REGION=${GITHUB_EVENT_NAME == 'workflow_dispatch' && '${{ github.event.inputs.secondaryRegion }}' || 'northeurope'}" >> $GITHUB_ENV
          echo "RESOURCE_GROUP_NAME=${APP_NAME}-${ENVIRONMENT}-rg" >> $GITHUB_ENV
          echo "SECONDARY_RESOURCE_GROUP_NAME=${APP_NAME}-${ENVIRONMENT}-secondary-rg" >> $GITHUB_ENV
      - name: Login to Azure # azure/login v1
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Create resource groups
        run: |
          az group create --name ${{ env.RESOURCE_GROUP_NAME }} --location ${{ env.REGION }} --tags Environment=${{ env.ENVIRONMENT }} Application=VATFilingPricingTool ManagedBy=GitHub
          az group create --name ${{ env.SECONDARY_RESOURCE_GROUP_NAME }} --location ${{ env.SECONDARY_REGION }} --tags Environment=${{ env.ENVIRONMENT }} Application=VATFilingPricingTool ManagedBy=GitHub
      - name: Deploy with ARM
        if: "${{ env.DEPLOYMENT_METHOD == 'ARM' }}"
        uses: azure/arm-deploy@v1 # azure/arm-deploy v1
        with:
          resourceGroupName: '${{ env.RESOURCE_GROUP_NAME }}'
          template: 'infrastructure/azure/arm-templates/main.json'
          parameters: 'infrastructure/azure/arm-templates/parameters.json environmentName=${{ env.ENVIRONMENT }} location=${{ env.REGION }} secondaryLocation=${{ env.SECONDARY_REGION }} appName=${{ env.APP_NAME }} sqlAdminLogin=${{ secrets.SQL_ADMIN_LOGIN }} sqlAdminPassword=${{ secrets.SQL_ADMIN_PASSWORD }}'
          deploymentMode: 'Incremental'
          deploymentName: 'vatfilingpricingtool-${{ env.ENVIRONMENT }}-${{ github.run_number }}'
        id: armDeploy
      - name: Setup Terraform
        if: "${{ env.DEPLOYMENT_METHOD == 'Terraform' }}"
        uses: hashicorp/setup-terraform@v2 # hashicorp/setup-terraform v2
        with:
          terraform_version: '1.3.0'
      - name: Initialize Terraform
        if: "${{ env.DEPLOYMENT_METHOD == 'Terraform' }}"
        run: |
          cd infrastructure/azure/terraform
          terraform init -backend-config="resource_group_name=${TF_STATE_RESOURCE_GROUP_NAME}" -backend-config="storage_account_name=${TF_STATE_STORAGE_ACCOUNT_NAME}" -backend-config="container_name=${TF_STATE_CONTAINER_NAME}" -backend-config="key=${TF_STATE_KEY}"
      - name: Apply Terraform
        if: "${{ env.DEPLOYMENT_METHOD == 'Terraform' }}"
        run: |
          cd infrastructure/azure/terraform
          terraform apply -auto-approve -var-file="environments/${{ env.ENVIRONMENT }}/terraform.tfvars" -var="environment=${{ env.ENVIRONMENT }}" -var="location=${{ env.REGION }}" -var="secondary_location=${{ env.SECONDARY_REGION }}" -var="app_name=${{ env.APP_NAME }}"
        id: terraformApply
      - name: Extract ARM outputs
        if: "${{ env.DEPLOYMENT_METHOD == 'ARM' }}"
        run: |
          echo "KEY_VAULT_NAME=$(az deployment group show --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name vatfilingpricingtool-${{ env.ENVIRONMENT }}-${{ github.run_number }} --query properties.outputs.keyVaultName.value -o tsv)" >> $GITHUB_ENV
          echo "AKS_CLUSTER_NAME=$(az deployment group show --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name vatfilingpricingtool-${{ env.ENVIRONMENT }}-${{ github.run_number }} --query properties.outputs.aksClusterName.value -o tsv)" >> $GITHUB_ENV
      - name: Extract Terraform outputs
        if: "${{ env.DEPLOYMENT_METHOD == 'Terraform' }}"
        run: |
          cd infrastructure/azure/terraform
          echo "KEY_VAULT_NAME=$(terraform output -raw key_vault_name)" >> $GITHUB_ENV
          echo "AKS_CLUSTER_NAME=$(terraform output -raw aks_cluster_name)" >> $GITHUB_ENV
      - name: Initialize Key Vault
        uses: azure/powershell@v1 # azure/powershell v1
        with:
          inlineScript: './infrastructure/scripts/initialize-keyvault.ps1 -KeyVaultName ${{ env.KEY_VAULT_NAME }} -SqlAdminUsername ${{ secrets.SQL_ADMIN_LOGIN }} -SqlAdminPassword ${{ secrets.SQL_ADMIN_PASSWORD }}'
          azPSVersion: 'latest'
    outputs:
      resourceGroupName: '${{ env.RESOURCE_GROUP_NAME }}'
      keyVaultName: '${{ env.KEY_VAULT_NAME }}'
      aksClusterName: '${{ env.AKS_CLUSTER_NAME }}'
  deploy_kubernetes:
    description: 'Deploys Kubernetes resources to AKS cluster'
    runs-on: ubuntu-latest
    needs:
      - deploy_infrastructure
    if: "${{ github.event.inputs.deployKubernetes != 'false' }}"
    steps:
      - name: Checkout repository # actions/checkout v3
        uses: actions/checkout@v3
      - name: Set environment variables
        run: |
          echo "ENVIRONMENT=${GITHUB_EVENT_NAME == 'workflow_dispatch' && '${{ github.event.inputs.environment }}' || 'development'}" >> $GITHUB_ENV
          echo "RESOURCE_GROUP_NAME=${{ needs.deploy_infrastructure.outputs.resourceGroupName }}" >> $GITHUB_ENV
          echo "AKS_CLUSTER_NAME=${{ needs.deploy_infrastructure.outputs.aksClusterName }}" >> $GITHUB_ENV
      - name: Login to Azure # azure/login v1
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Setup kubectl # azure/setup-kubectl v3
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: Get AKS credentials
        run: az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.AKS_CLUSTER_NAME }} --admin
      - name: Create namespace
        run: kubectl create namespace vatfilingpricingtool --dry-run=client -o yaml | kubectl apply -f -
      - name: Deploy Kubernetes configurations
        run: |
          kubectl apply -f infrastructure/kubernetes/namespace.yaml
          kubectl apply -f infrastructure/kubernetes/monitoring/

          # Apply environment-specific configurations
          if [ "${{ env.ENVIRONMENT }}" = "development" ]; then
            kubectl apply -f infrastructure/kubernetes/backend/config.yaml
            kubectl apply -f infrastructure/kubernetes/backend/secrets.yaml
            kubectl apply -f infrastructure/kubernetes/web/config.yaml
          elif [ "${{ env.ENVIRONMENT }}" = "staging" ]; then
            kubectl apply -f infrastructure/kubernetes/backend/config.yaml -n vatfilingpricingtool
            kubectl apply -f infrastructure/kubernetes/backend/secrets.yaml -n vatfilingpricingtool
            kubectl apply -f infrastructure/kubernetes/web/config.yaml -n vatfilingpricingtool
          elif [ "${{ env.ENVIRONMENT }}" = "production" ]; then
            kubectl apply -f infrastructure/kubernetes/backend/config.yaml -n vatfilingpricingtool
            kubectl apply -f infrastructure/kubernetes/backend/secrets.yaml -n vatfilingpricingtool
            kubectl apply -f infrastructure/kubernetes/web/config.yaml -n vatfilingpricingtool
          fi
      - name: Verify deployments
        run: |
          kubectl get namespaces
          kubectl get configmaps -n vatfilingpricingtool
          kubectl get secrets -n vatfilingpricingtool
  validate_deployment:
    description: 'Validates the deployed infrastructure'
    runs-on: ubuntu-latest
    needs:
      - deploy_infrastructure
      - deploy_kubernetes
    steps:
      - name: Checkout repository # actions/checkout v3
        uses: actions/checkout@v3
      - name: Set environment variables
        run: |
          echo "ENVIRONMENT=${GITHUB_EVENT_NAME == 'workflow_dispatch' && '${{ github.event.inputs.environment }}' || 'development'}" >> $GITHUB_ENV
          echo "RESOURCE_GROUP_NAME=${{ needs.deploy_infrastructure.outputs.resourceGroupName }}" >> $GITHUB_ENV
          echo "KEY_VAULT_NAME=${{ needs.deploy_infrastructure.outputs.keyVaultName }}" >> $GITHUB_ENV
          echo "AKS_CLUSTER_NAME=${{ needs.deploy_infrastructure.outputs.aksClusterName }}" >> $GITHUB_ENV
      - name: Login to Azure # azure/login v1
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Validate Key Vault
        run: |
          az keyvault show --name ${{ env.KEY_VAULT_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }}
          az keyvault secret list --vault-name ${{ env.KEY_VAULT_NAME }} --query "[].name" -o tsv
      - name: Validate AKS cluster
        run: az aks show --name ${{ env.AKS_CLUSTER_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "provisioningState" -o tsv
      - name: Generate deployment report
        run: |
          echo "# Infrastructure Deployment Report" > deployment-report.md
          echo "\n## Deployment Details" >> deployment-report.md
          echo "\n- Environment: ${{ env.ENVIRONMENT }}" >> deployment-report.md
          echo "- Deployment Method: ${{ github.event.inputs.deploymentMethod || 'ARM' }}" >> deployment-report.md
          echo "- Primary Region: ${{ github.event.inputs.region || 'westeurope' }}" >> deployment-report.md
          echo "- Secondary Region: ${{ github.event.inputs.secondaryRegion || 'northeurope' }}" >> deployment-report.md
          echo "- Deployment Date: $(date)" >> deployment-report.md
          echo "\n## Deployed Resources" >> deployment-report.md
          echo "\n### Resource Groups" >> deployment-report.md
          echo "- Primary: ${{ env.RESOURCE_GROUP_NAME }}" >> deployment-report.md
          echo "- Secondary: ${{ env.APP_NAME }}-${{ env.ENVIRONMENT }}-secondary-rg" >> deployment-report.md
          echo "\n### Key Resources" >> deployment-report.md
          echo "- Key Vault: ${{ env.KEY_VAULT_NAME }}" >> deployment-report.md
          echo "- AKS Cluster: ${{ env.AKS_CLUSTER_NAME }}" >> deployment-report.md
          echo "\n## Validation Results" >> deployment-report.md
          echo "\n- Key Vault Status: $(az keyvault show --name ${{ env.KEY_VAULT_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query 'properties.provisioningState' -o tsv)" >> deployment-report.md
          echo "- AKS Cluster Status: $(az aks show --name ${{ env.AKS_CLUSTER_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query 'provisioningState' -o tsv)" >> deployment-report.md
      - name: Upload deployment report # actions/upload-artifact v3
        uses: actions/upload-artifact@v3
        with:
          name: 'deployment-report-${{ env.ENVIRONMENT }}'
          path: 'deployment-report.md'
          retention-days: 30
      - name: Send deployment notification
        if: "${{ env.ENVIRONMENT == 'production' || env.ENVIRONMENT == 'staging' }}"
        run: |
          # Send deployment notification
          DEPLOYMENT_INFO="Environment: ${{ env.ENVIRONMENT }}\nDeployment Method: ${{ github.event.inputs.deploymentMethod || 'ARM' }}\nPrimary Region: ${{ github.event.inputs.region || 'westeurope' }}\nSecondary Region: ${{ github.event.inputs.secondaryRegion || 'northeurope' }}\nDeployment Date: $(date)\nDeployed By: ${{ github.actor }}"

          # Send to Teams webhook if configured
          if [ -n "${{ secrets.TEAMS_WEBHOOK_URL }}" ]; then
              curl -H "Content-Type: application/json" -d '{"text":"Infrastructure Deployment Completed Successfully\n'"$DEPLOYMENT_INFO"'"}' ${{ secrets.TEAMS_WEBHOOK_URL }}
          fi

          # Log deployment information
          echo "Deployment completed successfully:"
          echo "$DEPLOYMENT_INFO"